<?xml version="1.0" encoding="utf-8"?>
<lgapps:PreloadableApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:local="*"
	xmlns:lgapps="com.layerglue.flex3.base.applications.*"
	layout="absolute"
	preinitialize="preinitializeHandler()"
	creationPolicy="none"
	backgroundColor="0xFFFFFF"
	preloader="com.client.project.preloader.PreloaderView"
	preloaderMinDisplayTime="1000">
	
	<mx:Script>
		<![CDATA[
			import com.layerglue.lib.application.command.requests.StructuralDataNavigationRequest;
			import com.layerglue.lib.application.LayerGlueLocator;
			import com.client.project.maps.ProjectControllerToViewMap;
			import com.layerglue.lib.application.maps.ControllerToViewMap;
			import com.client.project.maps.ProjectStructureToControllerMap;
			import com.client.project.command.MainRequestCommandMap;
			import com.client.project.maps.ProjectStructureDeserializationMap;
			import com.layerglue.lib.application.setup.InitialSetupManager;
			import com.layerglue.lib.base.core.RequestCommandConnector;
			import com.layerglue.lib.application.navigation.NavigationManager;
			import com.client.project.model.ModelLocator;
			import com.client.project.preloader.PreloaderView;
			import com.layerglue.flex3.base.preloader.PreloadManager;
			import mx.collections.ArrayCollection;
			import com.layerglue.lib.base.io.FlashVars;
			import mx.events.FlexEvent;
			import mx.events.EffectEvent;
			import com.layerglue.flex3.base.effects.FadeExt;
			import mx.effects.Fade;
			import com.client.project.io.InitialLoadManager;
			import mx.preloaders.DownloadProgressBar;
			import com.layerglue.lib.application.navigation.NavigationManager;
			
			[Bindable]
			public var modelLocator:ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			//public var navigationManager:NavigationManager = NavigationManager.getInstance();
			
			private var _initialLoadManager:InitialLoadManager;
			
			private function preinitializeHandler():void
			{
				FlashVars.initialize(systemManager as DisplayObject);
				
				RequestCommandConnector.initialize([new MainRequestCommandMap()]);
				
				_initialLoadManager = new InitialLoadManager();
				_initialLoadManager.addEventListener(Event.COMPLETE, initialLoadCompleteHandler);
				_initialLoadManager.start();
				
				PreloadManager.getInstance().flexPreloader.addEventListener(FlexEvent.PRELOADER_DONE, flexPreloaderDoneHandler);
			}
			
			private function flexPreloaderDoneHandler(event:Event):void
			{
				reparentPreloader();
				callLater(hidePreloader);
			}
			
			private function initialLoadCompleteHandler(event:Event):void
			{
				var initialSetupManager:InitialSetupManager = new InitialSetupManager();
				initialSetupManager.xmlToStructuralDataMap = new ProjectStructureDeserializationMap();
				initialSetupManager.structuralDataToControllerMap = new ProjectStructureToControllerMap();
				initialSetupManager.controllerToViewMap = new ProjectControllerToViewMap();
				initialSetupManager.setup(_initialLoadManager.structuralXML);
				
				createComponentsFromDescriptors();
			}
			
			private function hidePreloader():void
			{
				//preloaderContainer.visible = false;
				
				var effect:Fade = new FadeExt(preloaderContainer, 1, 0, 500);
				effect.addEventListener(EffectEvent.EFFECT_END, preloaderHideComplete);
				effect.play();
			}
			
			private function preloaderHideComplete(event:EffectEvent):void
			{
				(PreloadManager.getInstance().preloaderDisplay as PreloaderView).destroy();
				removeChild(preloaderContainer);
			}
			
			private function reparentPreloader():void
			{
				preloaderContainer.addChild(PreloadManager.getInstance().preloaderDisplay as DisplayObject);
			}
			
			private function doNav():void
			{
				//trace("modelLocator.siteStructure.constructor: "+modelLocator.siteStructure.getChildAt(0).title);
				(new StructuralDataNavigationRequest(modelLocator.siteStructure.getChildAt(0))).dispatch();
			}
			
		]]>
	</mx:Script>
	
	<mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" direction="vertical">
		<!-- The Tree and DataGrid controls are good for exploring object hierarchies -->
		<mx:HBox>
			<mx:Tree id="projectTree" dataProvider="{LayerGlueLocator.getInstance().structuralData}" width="220" height="280"/>
			<mx:DataGrid dataProvider="{projectTree.selectedItem}" width="580" height="280"/>
		</mx:HBox>
		<mx:Button label="Do nav" click="doNav()" />
	</mx:Box>
	<mx:UIComponent id="preloaderContainer" width="100%" height="100%" />
</lgapps:PreloadableApplication>
